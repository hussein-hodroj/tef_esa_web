import multer from 'multer';
import asyncHandler from 'express-async-handler';
import cnx from '../../Connect.js';

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    try {
      cb(null, '../../../frontend/public/uploads');
    } catch (error) {
      console.error('Error:', error.message);
    }
  },
  filename: (req, file, cb) => {
    try {
      if (file) {
        // Generate a unique filename for the uploaded file (e.g., timestamp + originalname)
        const uniqueFilename = Date.now() + '-' + file.originalname;
        cb(null, uniqueFilename);
      } else {
        cb(null, null); // Set filename to null if no file
      }
    } catch (error) {
      console.error('Error:', error.message);
    }
  },
});

export const upload = multer({ storage: storage });

export const registerCandidate = asyncHandler(async (req, res) => {
  try {
    // Extract data from the request body
    const {
      title,
      PassportNumber,
      FirstName,
      LastName,
      TongueLanguage,
      Nationality,
      Address,
      Country,
      Town,
      Email,
      Phone,
      Motivation,
      CourseDateID,
      RegistrationDate,
      PaymentStatus,
    } = req.body;

    // Get the filename generated by multer
    const PassportPhoto = req.file.filename;

    // Define the SQL query
    const sql = `
      INSERT INTO registrations
        (title, PassportNumber, FirstName, LastName, TongueLanguage, Nationality, Address, Country, Town, Email, Phone, Motivation, PassportPhoto, CourseDateID, RegistrationDate, PaymentStatus)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
    `;

    // Define the values to be inserted
    const values = [
      title,
      PassportNumber,
      FirstName,
      LastName,
      TongueLanguage,
      Nationality,
      Address,
      Country,
      Town,
      Email,
      Phone,
      Motivation,
      PassportPhoto,
      CourseDateID,
      RegistrationDate,
      PaymentStatus,
    ];

    // Execute the SQL query
    await cnx.query(sql, values);

    // If the query is successful, send a response
    res.status(201).json({ message: 'Candidate registered successfully' });
  } catch (error) {
    console.error('Error registering candidate:', error);
    res.status(500).json({ message: 'Failed to register candidate' });
  }
});
